<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python3 on Bitperi(Periklis Gkolias)</title>
    <link>https://perigk.github.io/tags/python3/</link>
    <description>Recent content in python3 on Bitperi(Periklis Gkolias)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 24 Nov 2019 22:04:50 +0200</lastBuildDate>
    
	<atom:link href="https://perigk.github.io/tags/python3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Primer on Python Partial Functions</title>
      <link>https://perigk.github.io/posts/a-primer-on-partial-functions/</link>
      <pubDate>Sun, 24 Nov 2019 22:04:50 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/a-primer-on-partial-functions/</guid>
      <description>Partial functions are one of the most &amp;ldquo;terrifying concepts&amp;rdquo; I hear people talking about. Personally, I think the idea is fairly easy to grasp. That is, I will try to explain in a few paragraphs with python and help you escape the math labyrinth of &amp;ldquo;official documentation&amp;rdquo;.
What is a partial function Partial functions are a computer science concept where we can derive a function with x parameters to a function with fewer parameters and constant values set for the more limited function.</description>
    </item>
    
    <item>
      <title>Generate cooking recipes that guarantee food poisoning, with LSTM based libraries</title>
      <link>https://perigk.github.io/posts/generate-cooking-recipes/</link>
      <pubDate>Mon, 01 Jul 2019 14:28:24 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/generate-cooking-recipes/</guid>
      <description>Unless you are living in the Amazonian forest with no access to the Internet, there is literally no chance that you have not heard about the Deep Learning boom, of the last few years.
Training neural networks, that can make decisions, distinguish fake images or generate fake videos, in a relatively short time is becoming the norm.
It doesn&amp;rsquo;t all have to be scary though. Sometimes you can just have fun with all that power.</description>
    </item>
    
    <item>
      <title>The Incredible Hulk(ython): Making Python Strong(ly Typed)</title>
      <link>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</guid>
      <description>Python is a wonderful dynamically typed language, but quite a few people consider this as its biggest disadvantage.
But why? Even though dynamically typed languages, remove the headache of writing &amp;ldquo;mundane&amp;rdquo; type declarations and make writing more pleasant and a little bit faster, this need is just delegated to the runtime environment of the language.
That means, that some bugs that could have been eliminated, almost immediately after they are introduced, they will now remain silent till the code is invoked, And you know when this is going to happen, right?</description>
    </item>
    
    <item>
      <title>Django by example(Antonio Mele) - book review</title>
      <link>https://perigk.github.io/posts/django-example-book-review/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/django-example-book-review/</guid>
      <description>Disclaimer: At the time of starting to write this article, the next version of the book under review, has not been published yet. If you want to read the newest version, you can find it here
Many people don&amp;rsquo;t have enough time to research for a book. I think such articles could help people, accelerate their (correct)decision.
That&amp;rsquo;s why I decided to write this article. This is a quick and dense review of Django by example by Antonio Mele</description>
    </item>
    
    <item>
      <title>Doctests, the shy giant of testing modules</title>
      <link>https://perigk.github.io/posts/doctests-the/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/doctests-the/</guid>
      <description>Do you use python, even to wash your clothes? Do you find unit testing boring, but still have to do it, because you find value in automated testing? Then this article is for you.
The idea I believe you have used the python console, from time to time. Lets assume you are writing a few inline functions like below, to experiment with stuff:
$ python Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) [GCC 7.</description>
    </item>
    
    <item>
      <title>How being lazy, led me to publicize my first python package</title>
      <link>https://perigk.github.io/posts/how-being-lazy-led-me-to-publicize-my-first-python-package/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/how-being-lazy-led-me-to-publicize-my-first-python-package/</guid>
      <description>How being lazy, led me to publicize my first python package There is a common saying, in the software industry, which goes like:
 I want to hire a lazy developer because he will find the way to deal with difficult problems in the shortest and easiest manner.
 I wasn’t there the first time this was told, but rumors say that these words belong to Bill Gates.
I don’t know if Mr Gates would ever hire me(wink wink) but I have to admit that having that kind of laziness, has led me, from time to time, to create interesting and time saving libraries/scripts/workarounds.</description>
    </item>
    
    <item>
      <title>Must-read books for software engineers - the alternative list</title>
      <link>https://perigk.github.io/posts/hidden-gem-books-all-software-engineers-should-check/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/hidden-gem-books-all-software-engineers-should-check/</guid>
      <description>There are tons of great books out there and a gazillion articles recommending them. The purpose of this article is not to recommend them again; I am pretty certain, that all such lists are very easy to be found with a few Google searches and no one needs me to tell him, that Code Complete is a must-read.
Thus, I&amp;rsquo;m going to list some books that are not very&amp;hellip;popular, but they are totally worth reading.</description>
    </item>
    
    <item>
      <title>A Comprehensive Guide to Unit Testing with Python3</title>
      <link>https://perigk.github.io/posts/a-comprehensive-guide-to-unit-testing/</link>
      <pubDate>Tue, 30 Jan 2018 17:05:18 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/a-comprehensive-guide-to-unit-testing/</guid>
      <description>A comprehensive introduction to unit-testing and mocking with Python3 Unit testing is quickly becoming a must for all job adverts. There are a few people who don’t like Test Driven Development(TDD), but at least they agree on the value, automation testing(not only unit tests) add to the overall code quality and to the debugging process.
By the time of writing, according to dice.com, TDD is enjoying increased popularity year after year.</description>
    </item>
    
  </channel>
</rss>