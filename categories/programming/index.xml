<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Bitperi(Periklis Gkolias)</title>
    <link>https://perigk.github.io/categories/programming/</link>
    <description>Recent content in Programming on Bitperi(Periklis Gkolias)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Sep 2020 18:45:31 +0300</lastBuildDate>
    
	<atom:link href="https://perigk.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Myths about self teaching that need to be busted</title>
      <link>https://perigk.github.io/posts/self-teaching-myths/</link>
      <pubDate>Mon, 28 Sep 2020 18:45:31 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/self-teaching-myths/</guid>
      <description>Self-teaching is the norm in the industry, many years now. Most of the technologies you learned during your official education 2, 10, or 30 years ago are almost obsolete in the industry.
So, no official education would constantly give you everything you need, here, almost by design.
But lately, it has been popularized too. The main reasons IMHO is the need for more &amp;ldquo;coding hands NOW&amp;rdquo; aka supply vs demand and the cost (in terms time and money) to go to the university (in terms of time and money again).</description>
    </item>
    
    <item>
      <title>A gRPC primer from a non-gRPC dev</title>
      <link>https://perigk.github.io/posts/grpc/</link>
      <pubDate>Tue, 15 Sep 2020 21:23:24 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/grpc/</guid>
      <description>I keep hearing about gRPC those days; not sure if the existing trend is soaring or it is a coincidence. In any case, as I have never dug to the concept, I thought it is a good time to do so.
High-level view of gRPC gRPC is an RPC framework, created by Google. Interestingly enough, the initial &amp;ldquo;g&amp;rdquo; stands for &amp;ldquo;general (purpose)&amp;rdquo; and not for &amp;ldquo;google&amp;rdquo;.
So gRPC is an RPC framework that can be used in any kind of situation where an RPC style communication is required.</description>
    </item>
    
    <item>
      <title>Git Bisect, the Undervalued Debugging Machine Gun</title>
      <link>https://perigk.github.io/post/git-bisect-the-undervalued-debugging-machine-gun/</link>
      <pubDate>Tue, 21 Jul 2020 12:48:46 +0300</pubDate>
      
      <guid>https://perigk.github.io/post/git-bisect-the-undervalued-debugging-machine-gun/</guid>
      <description>Git bisect is a fantastic tool that could make debugging a breeze. Yet, very few people use it actively.
In this quick article, I will showcase how git bisect can point out the where your bug cause lies, fairly fast.
But first, lets talk about&amp;hellip;
Delta debugging Delta debugging is a process where you do many steps and in each one your plan is to eliminate half the &amp;ldquo;problem&amp;rdquo;. You can think of it as the binary search of debugging.</description>
    </item>
    
    <item>
      <title>I just finished Code complete cover to cover. Here are the most unexpected things I learned</title>
      <link>https://perigk.github.io/posts/code-complete-cover-to-cover/</link>
      <pubDate>Tue, 26 Mar 2019 21:55:08 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/code-complete-cover-to-cover/</guid>
      <description>I got code complete several years ago. Actually, it was a graduation gift.
I sometimes peaked into some of its chapters but never thought I was able to read it all at once. It was like a superhuman task for me.
Until this year, where I decided, in the game of no excuses, to play hard. One of the battles I chose to give was to finish the book.
During this time, I learned a lot of stuff.</description>
    </item>
    
    <item>
      <title>Code Review for the Solo Dev</title>
      <link>https://perigk.github.io/posts/code-review-for-the-solo-dev/</link>
      <pubDate>Mon, 31 Dec 2018 14:39:07 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/code-review-for-the-solo-dev/</guid>
      <description>I will start this article, as I did with the previous one in the series.
Nothing can substitute a great team. But a real warrior has to be able to rely on thyself if needed.
A few people nowadays, work on a team of one.
People that are subject matter experts and the very best on their fields (and I am the last human on earth who can give them any professional advice).</description>
    </item>
    
    <item>
      <title>Asyncio, the invincible</title>
      <link>https://perigk.github.io/posts/asyncio-the-invincible/</link>
      <pubDate>Thu, 20 Dec 2018 23:03:29 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/asyncio-the-invincible/</guid>
      <description>TL;DR / Intro Async programming is the new sexy when it comes to multitasking. It became famous with NodeJS but you can find libraries that support it in most major languages.
For example in Python, the two most famous approaches are the usage of Tornado Web Server and the built-in library asyncio. For today we will do an introduction to the latter, as it has gone through tons of iterations and improvements lately and it is ready to charm people with its intuitive approach.</description>
    </item>
    
    <item>
      <title>Web Assembly for Buzzword Haters</title>
      <link>https://perigk.github.io/posts/web-assembly-for-buzzword-haters/</link>
      <pubDate>Sun, 14 Oct 2018 20:05:29 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/web-assembly-for-buzzword-haters/</guid>
      <description>Web assembly looks like the next best thing in web technologies. Even though the first release happened fairly recently, namely in early 2017, there were rumors and anticipation long ago. With a quick google searching, I found this HackerNews article, almost 3 years ago, for example.
So what is all the hype about WebAssembly? As with all new(and promising) technologies, there is information overload in the air, I made a compact FAQ to help you get up to speed with this new kid in the town</description>
    </item>
    
    <item>
      <title>The Incredible Hulk(ython): Making Python Strong(ly Typed)</title>
      <link>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</guid>
      <description>Python is a wonderful dynamically typed language, but quite a few people consider this as its biggest disadvantage.
But why? Even though dynamically typed languages, remove the headache of writing &amp;ldquo;mundane&amp;rdquo; type declarations and make writing more pleasant and a little bit faster, this need is just delegated to the runtime environment of the language.
That means, that some bugs that could have been eliminated, almost immediately after they are introduced, they will now remain silent till the code is invoked, And you know when this is going to happen, right?</description>
    </item>
    
    <item>
      <title>A Comprehensive Guide to Unit Testing with Python3</title>
      <link>https://perigk.github.io/posts/a-comprehensive-guide-to-unit-testing/</link>
      <pubDate>Tue, 30 Jan 2018 17:05:18 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/a-comprehensive-guide-to-unit-testing/</guid>
      <description>A comprehensive introduction to unit-testing and mocking with Python3 Unit testing is quickly becoming a must for all job adverts. There are a few people who donâ€™t like Test Driven Development(TDD), but at least they agree on the value, automation testing(not only unit tests) add to the overall code quality and to the debugging process.
By the time of writing, according to dice.com, TDD is enjoying increased popularity year after year.</description>
    </item>
    
  </channel>
</rss>