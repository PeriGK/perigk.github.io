<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Bitperi(Periklis Gkolias)</title>
    <link>https://perigk.github.io/categories/programming/</link>
    <description>Recent content in Programming on Bitperi(Periklis Gkolias)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 31 Dec 2018 14:39:07 +0200</lastBuildDate>
    
	<atom:link href="https://perigk.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code Review for the Solo Dev</title>
      <link>https://perigk.github.io/posts/code-review-for-the-solo-dev/</link>
      <pubDate>Mon, 31 Dec 2018 14:39:07 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/code-review-for-the-solo-dev/</guid>
      <description>I will start this article, as I did with the previous one in the series.
Nothing can substitute a great team. But a real warrior has to be able to rely on thyself if needed.
A few people nowadays, work on a team of one.
People that are subject matter experts and the very best on their fields (and I am the last human on earth who can give them any professional advice).</description>
    </item>
    
    <item>
      <title>Asyncio, the invincible</title>
      <link>https://perigk.github.io/posts/asyncio-the-invincible/</link>
      <pubDate>Thu, 20 Dec 2018 23:03:29 +0200</pubDate>
      
      <guid>https://perigk.github.io/posts/asyncio-the-invincible/</guid>
      <description>TL;DR / Intro Async programming is the new sexy when it comes to multitasking. It became famous with NodeJS but you can find libraries that support it in most major languages.
For example in Python, the two most famous approaches are the usage of Tornado Web Server and the built-in library asyncio. For today we will do an introduction to the latter, as it has gone through tons of iterations and improvements lately and it is ready to charm people with its intuitive approach.</description>
    </item>
    
    <item>
      <title>Web Assembly for Buzzword Haters</title>
      <link>https://perigk.github.io/posts/web-assembly-for-buzzword-haters/</link>
      <pubDate>Sun, 14 Oct 2018 20:05:29 +0300</pubDate>
      
      <guid>https://perigk.github.io/posts/web-assembly-for-buzzword-haters/</guid>
      <description>Web assembly looks like the next best thing in web technologies. Even though the first release happened fairly recently, namely in early 2017, there were rumors and anticipation long ago. With a quick google searching, I found this HackerNews article, almost 3 years ago, for example.
So what is all the hype about WebAssembly? As with all new(and promising) technologies, there is information overload in the air, I made a compact FAQ to help you get up to speed with this new kid in the town</description>
    </item>
    
    <item>
      <title>The Incredible Hulk(ython): Making Python Strong(ly Typed)</title>
      <link>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perigk.github.io/posts/the-incredible-hulkython-making-python-strongly-typed/</guid>
      <description>Python is a wonderful dynamically typed language, but quite a few people consider this as its biggest disadvantage.
But why? Even though dynamically typed languages, remove the headache of writing &amp;ldquo;mundane&amp;rdquo; type declarations and make writing more pleasant and a little bit faster, this need is just delegated to the runtime environment of the language.
That means, that some bugs that could have been eliminated, almost immediately after they are introduced, they will now remain silent till the code is invoked, And you know when this is going to happen, right?</description>
    </item>
    
  </channel>
</rss>