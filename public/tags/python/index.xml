<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Bitperi(Periklis Gkolias)</title>
    <link>https://perigk.github.io/tags/python/</link>
    <description>Recent content in Python on Bitperi(Periklis Gkolias)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Jun 2018 00:00:00 +0300</lastBuildDate>
    
	<atom:link href="https://perigk.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django by example(Antonio Mele) - book review</title>
      <link>https://perigk.github.io/post/django-example-book-review/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/post/django-example-book-review/</guid>
      <description>Disclaimer: At the time of starting to write this article, the next version of the book under review, has not been published yet. If you want to read the newest version, you can find it here
Many people don&amp;rsquo;t have enough time to research for a book. I think such articles could help people, accelerate their (correct)decision.
That&amp;rsquo;s why I decided to write this article. This is a quick and dense review of Django by example by Antonio Mele</description>
    </item>
    
    <item>
      <title>Doctests, the shy giant of testing modules</title>
      <link>https://perigk.github.io/post/doctests-the/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/post/doctests-the/</guid>
      <description>Do you use python, even to wash your clothes? Do you find unit testing boring, but still have to do it, because you find value in automated testing? Then this article is for you.
The idea I believe you have used the python console, from time to time. Lets assume you are writing a few inline functions like below, to experiment with stuff:
$ python Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) [GCC 7.</description>
    </item>
    
    <item>
      <title>How being lazy, led me to publicize my first python package</title>
      <link>https://perigk.github.io/post/how-being-lazy-led-me-to-publicize-my-first-python-package/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/post/how-being-lazy-led-me-to-publicize-my-first-python-package/</guid>
      <description>How being lazy, led me to publicize my first python package There is a common saying, in the software industry, which goes like:
 I want to hire a lazy developer because he will find the way to deal with difficult problems in the shortest and easiest manner.
 I wasn’t there the first time this was told, but rumors say that these words belong to Bill Gates.
I don’t know if Mr Gates would ever hire me(wink wink) but I have to admit that having that kind of laziness, has led me, from time to time, to create interesting and time saving libraries/scripts/workarounds.</description>
    </item>
    
    <item>
      <title>Must-read books for software engineers - the alternative list</title>
      <link>https://perigk.github.io/post/hidden-gem-books-all-software-engineers-should-check/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0300</pubDate>
      
      <guid>https://perigk.github.io/post/hidden-gem-books-all-software-engineers-should-check/</guid>
      <description>There are tons of great books out there and a gazillion articles recommending them. The purpose of this article is not to recommend them again; I am pretty certain, that all such lists are very easy to be found with a few Google searches and no one needs me to tell him, that Code Complete is a must-read.
Thus, I&amp;rsquo;m going to list some books that are not very&amp;hellip;popular, but they are totally worth reading.</description>
    </item>
    
    <item>
      <title>A1 comprehensive introduction to unit-testing and mocking with Python3</title>
      <link>https://perigk.github.io/post/a-comprehensive-introduction-to-unit-testing-and-mocking-with-python3/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0200</pubDate>
      
      <guid>https://perigk.github.io/post/a-comprehensive-introduction-to-unit-testing-and-mocking-with-python3/</guid>
      <description>Unit testing is quickly becoming a must for all job adverts. There are a few people who don&amp;rsquo;t like Test Driven Development(TDD), but at least they agree on the value, automation testing(not only unit tests) add to the overall code quality and to the debugging process.
By the time of writing, according to dice.com, TDD is enjoying increased popularity year after year.
Without further ado, let&amp;rsquo;s start our journey. You can download the source code from here</description>
    </item>
    
  </channel>
</rss>